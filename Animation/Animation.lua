Animation = {}
Animation.__index = Animation

function Animation.new(spritesheetImagePath, frameWidth, frameHeight, frames, settings)
    -- required string spritesheetImagePath: The path to the spritesheet file.
    --
    -- required integer frameWidth: The width in pixels of a frame in the spritesheet.
    --
    -- required integer frameHeight
    --
    -- required frames: A sequence of frame objects. 
    --  - required integer x: x-coordinate in the spritesheet.
    --  - required integer y: y-coordinate in the spritesheet.
    --  - optional float duration: frame duration in seconds.
    --  - optional string callback: the name of a function to call on the animation's owner when the frame is played.
    --  
    -- optional settings: 
    --  - float defaultDuration: the default duration in seconds for frames.
    --  - boolean loop: should the animation begin again from the beginning once finished?
    --  - boolean bounce: should the animation play backwards upon reaching the final frame / returning to the starting frame. 
    --  - boolean drawOnFinish: should the final frame continue to be drawn after the animation has finished?
    --  - integer playingDirection: either 1 or -1. If 1, advance forwards through the frames. If -1 then start at the end and go backwards.
    --  - table owner: Any table is a valid owner. Frames which have callbacks will attempt to call a field on the owner.
    --  - function onFinishCallback: Call this when the animation finishes.
    --  - string name: The animation's name.
    
    if not spritesheetImagePath then
        print "[ERROR] Animation.new - spritesheetImagePath was nil. Returning nil."
        return nil
    elseif not frameWidth then
        print "[ERROR] Animation.new - no frameWidth was given. Returning nil."
        return nil
    elseif not frameHeight then
        print "[ERROR] Animation.new - no frameHeight was given. Returning nil."
        return nil
    elseif not frames then
        print "[ERROR] Animation.new - no frames were given. Returning nil."
        return nil
    elseif #frames == 0 then
        print "[ERROR] Animation.new - empty list of frames. Returning nil."
        return nil
    end
    
    local self = {}

    -- Default settings: 
    self.defaultDuration = 0.2
    self.loop = true 
    self.bounce = false
    self.initialPlayingDirection = 1
    self.drawOnFinish = true
    self.name = ""
 
    -- Override defaults if present in settings
    if settings then
        if settings.defaultDuration     then self.defaultDuration         = settings.defaultDuration  end
        if settings.loop   ~= nil       then self.loop                    = settings.loop             end
        if settings.bounce ~= nil       then self.bounce                  = settings.bounce           end
        if settings.playingDirection    then self.initialPlayingDirection = settings.playingDirection end
        if settings.drawOnFinish ~= nil then self.drawOnFinish            = settings.drawOnFinish     end
        if settings.owner               then self.owner                   = settings.owner            end
        if settings.onFinishCallback    then self.onFinishCallback        = settings.onFinishCallback end
        if settings.name                then self.name                    = settings.name             end
    end

    self.spritesheet = {}
    self.spritesheet.imagePath = spritesheetImagePath
    self.spritesheet.frameWidth = frameWidth
    self.spritesheet.frameHeight = frameHeight
    self.spritesheet.image = love.graphics.newImage(spritesheetImagePath)
    self.spritesheet.imageWidth = self.spritesheet.image:getWidth()
    self.spritesheet.imageHeight = self.spritesheet.image:getHeight()
    self.spritesheet.numCols = self.spritesheet.imageWidth / frameWidth
    self.spritesheet.numRows = self.spritesheet.imageHeight / frameHeight

    self.frames = frames
    self.numFrames = #frames
    self.width = self.spritesheet.frameWidth
    self.height = self.spritesheet.frameHeight
    self.playing = false
    if self.initialPlayingDirection == 1 then
        self.currentFrameIndex = 1
    else
        self.currentFrameIndex = #frames
    end
    self.currentPlayingDirection = self.initialPlayingDirection
    self.durationTimer = self.frames[self.currentFrameIndex].duration or self.defaultDuration 

    setmetatable(self, Animation)
    self:_setCurrentFrameQuad()

    return self 
end

-- Loads the animation from a file generated by lovemachine.
-- Expects a full file path, e.g. Animations/hero_animation.lua
-- The file should return a table that looks like this:
-- {
--      spritesheetImagePath = "hero_spritesheet_64x64.png",
--      frameWidth = 64,
--      frameHeight = 64,
--      frames = {{x=1, y=2, duration=0.1, callback="footsteps"}, ... },
--      animationSettings = { ... },
-- }
function Animation.newFromFile(file_path, settings)
    print(string.format("Creating new animation from %s.", file_path))
    if not love.filesystem.exists(file_path) then
        print(string.format("Animation.newFromFile - file '%s' does not exist.", file_path))
        return nil
    end

    local chunk = love.filesystem.load(file_path)
    if not chunk then
        print "Could not load chunk."
        return nil
    end

    local animationData = chunk()
    if not animationData then
        print "Could not parse file."
        return nil
    end

    local imagePath = animationData.imagePath
    local frameWidth = animationData.frameWidth
    local frameHeight = animationData.frameHeight
    local frames = animationData.frames
    local animationSettings = animationData.animationSettings

    if not imagePath then
        print "Table in file was missing a required field: imagePath"
        return nil
    elseif not frameWidth then
        print "Table in file was missing a required field: frameWidth"
        return nil
    elseif not frameHeight then
        print "Table in file was missing a required field: frameHeight"
        return nil
    elseif not frames then
        print "Table in file was missing a required field: frames"
        return nil
    elseif not animationSettings then
        print "Table in file was missing a required field: animationSettings"
        return nil
    end

    print "File loaded successfully."
    
    -- Merge the two settings objects together, giving priority to the one passed to the function.
    if settings then
        for key, value in pairs(settings) do
            animationSettings[key] = value
        end
    end

    return Animation.new(imagePath, frameWidth, frameHeight, frames, animationSettings)
end

function Animation:update(dt)
    if not self.playing then return end

    -- No need to update anything if there's only 1 frame.
    if self.numFrames == 1 then return end 

    self.durationTimer = self.durationTimer - dt
    if self.durationTimer < 0 then 
        self.currentFrameIndex = self.currentFrameIndex + self.currentPlayingDirection
        
        -- Direction switching logic:
        if self.currentFrameIndex > self.numFrames then
            if self.bounce then
                if self.loop or self.initialPlayingDirection == 1 then 
                    self.currentFrameIndex = self.numFrames - 1
                    self.currentPlayingDirection = -1 
                else
                    self:_finish()
                    return
                end
            elseif self.loop then
                self.currentFrameIndex = 1
            else
                self:_finish()
                return
            end
        elseif self.currentFrameIndex < 1 then
            if self.bounce then
                if self.loop or self.initialPlayingDirection == -1 then
                    self.currentFrameIndex = 1
                    self.currentPlayingDirection = 1
                else
                    self:_finish()
                    return
                end
            elseif self.loop then
                self.currentFrameIndex = self.numFrames
            else
                self:_finish()
                return
            end
        end

        -- Reset durationTimer and call the frame's callback if it has one.
        local currentFrame = self.frames[self.currentFrameIndex]

        self.durationTimer = currentFrame.duration or self.defaultDuration

        if currentFrame.callback then
            if self.owner then 
                if self.owner[currentFrame.callback] then
                    self.owner[currentFrame.callback]()
                else
                    printf("[WARNING] Animation:update - a frame has a callback named '%s' but the animation owner has no property named '%s'.", currentFrame.callback, currentFrame.callback)
                end
            else
                printf("[WARNING] Animation:update - a frame has a callback named '%s' but the animation has no owner.", currentFrame.callback)
            end
        end

        self:_setCurrentFrameQuad()
    end
end

function Animation:draw(x,y)
    if self.playing or self.drawOnFinish then
        love.graphics.draw(self.spritesheet.image, self.currentFrameQuad, x, y)
    end
end

function Animation:play()
    self.playing = true
    self:_setCurrentFrameQuad()
end

function Animation:pause()
    self.playing = false
end

function Animation:reset()
    if self.initialPlayingDirection == 1 then
        self.currentFrameIndex = 1
    else
        self.currentFrameIndex = self.numFrames
    end
    self.durationTimer = self.frames[self.currentFrameIndex].duration or self.defaultDuration 
    self.playingDirection = self.initialPlayingDirection 
    self.playing = false
    self:_setCurrentFrameQuad()
end

-- Private functions:
function Animation:_finish()
    print "Animation finished."
    self.playing = false

    if self.onFinishCallback then
        self.onFinishCallback()
    end
end

function Animation:_setCurrentFrameQuad()
    -- By storing the quad it doesn't have to be recomputed all the time:
    local frameWidth, frameHeight = self.spritesheet.frameWidth, self.spritesheet.frameHeight
    local imageWidth, imageHeight = self.spritesheet.imageWidth, self.spritesheet.imageHeight

    local currentFrame = self.frames[ self.currentFrameIndex ]
    local frame_x = (currentFrame.x - 1) * frameWidth
    local frame_y = (currentFrame.y - 1) * frameHeight

    self.currentFrameQuad = love.graphics.newQuad(frame_x, frame_y, frameWidth, frameHeight, imageWidth, imageHeight)
end
